import { IRequestOptions, TLong } from '../../interface';
import request from '../../tools/request';
import { IWithApiMixin, TTransaction } from '@waves/ts-types';


/**
 * GET /blocks/headers/seq/{from}/{to}
 * Get block headers at specified heights
 * @param base
 * @param from
 * @param to
 */
export function fetchHeadersSeq(base: string, from: number, to: number): Promise<Array<IBlockHeader>> {
    return request({
        base,
        url: `/blocks/headers/seq/${from}/${to}`
    })
}

/**
 * GET /blocks/headers/last
 * Last block header
 * @param base
 */
export function fetchHeadersLast(base: string, options?: IRequestOptions): Promise<IBlockHeader> {
    return request({
        base,
        url: '/blocks/headers/last'
    });
}

/**
 * GET /blocks/height/{signature}
 * Height of a block by its signature
 * @param base
 * @param signature
 */
export function fetchHeightBySignature(base: string, signature: string): Promise<{ height: number }> {
    return request({
        base,
        url: `/blocks/height/${signature}`
    })
}

/**
 * GET /blocks/headers/at/{height}
 * Block header at height
 * @param base
 * @param height
 */
export function fetchHeadersAt(base: string, height: number, options?: IRequestOptions): Promise<IBlockHeader> {
    return request({
        base,
        url: `/blocks/headers/at/${height}`
    });
}

/**
 * GET /blocks/at/{height}
 * Get block at specified height
 * @param base
 * @param height
 */
export function BlockAt(base: string, height: number): Promise<IBlock> {
    return request({
        base,
        url: `/blocks/at/${height}`
    });
}

/**
 * GET /blocks/seq/{from}/{to}
 * Block range
 * @param base
 * @param from
 * @param to
 */
export function fetchSeq(base: string, from: number, to: number): Promise<Array<IBlock>> {
    return request({
        base,
        url: `/blocks/seq/${from}/${to}`
    })
}

/**
 * GET /blocks/signature/{signature}
 * Get block by its signature
 * @param base
 * @param signature
 */
export function fetchBlockBySignature(base: string, signature: string): Promise<IBlock> {
    return request({
        base,
        url: `/blocks/signature/${signature}`
    })
}

/**
 * GET /blocks/first
 * Get genesis block
 * @param base
 */
export function fetchFirst(base: string): Promise<IBlock> {
    return request({
        base,
        url: `/blocks/first`
    })
}

/**
 * /blocks/address/{address}/{from}/{to}
 * Get list of blocks generated by specified address
 * @param base
 * @param address
 * @param from
 * @param to
 */
export function fetchBlocksByAddress(base: string, address: string, from: number, to: number): Promise<Array<IBlock>>  {
    return request({
        base,
        url: `/blocks/address/${address}/${from}/${to}`
    })
}

/**
 * GET /blocks/last
 * Last block
 * @param base
 */
export function fetchLast(base: string): Promise<IBlock> {
    return request({
        base,
        url: '/blocks/last'
    })
}

/**
 * GET /blocks/delay/{signature}/{blockNum}
 * Average delay in milliseconds between last blockNum blocks starting from block with signature
 * @param base
 * @param signature
 * @param blockNum
 */
export function fetchDelay(base: string, signature: string, blockNum: string): Promise<{ delay: number}> {
    return request({
        base,
        url: `/blocks/delay/${signature}/${blockNum}`
    })
}

/**
 * GET /blocks/height
 * @param base
 */
export function fetchHeight(base: string): Promise<{ height: number }> {
    return request({
        base,
        url: '/blocks/height'
    });
}


export interface IBlockHeader {
    blocksize: number;
    reward: TLong;
    signature: string;
    generator: string;
    version: number;
    reference: string;
    features: Array<string>;
    totalFee: TLong;
    desiredReward: number;
    transactionCount: number;
    timestamp: number;
    height: number;
    'nxt-consensus': {
        'base-target': number;
        'generation-signature': string;
    }
}

export interface IBlock extends IBlockHeader {
    fee: TLong;
    transactions: Array<TTransaction<TLong> & IWithApiMixin>;
}
